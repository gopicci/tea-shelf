# Generated by Django 3.0.6 on 2020-07-23 19:36

import catalog.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Joined at')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Brewing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('weight', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('initial', models.DurationField(blank=True, default=datetime.timedelta(0), null=True)),
                ('increments', models.DurationField(blank=True, default=datetime.timedelta(0), null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('WHITE', 'WHITE'), ('YELLOW', 'YELLOW'), ('GREEN', 'GREEN'), ('OOLONG', 'OOLONG'), ('BLACK', 'BLACK'), ('FERMENTED', 'FERMENTED'), ('HERBAL', 'HERBAL'), ('SCENTED', 'SCENTED'), ('OTHER', 'OTHER')], max_length=20)),
                ('gongfu_brewing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='catalog.Brewing')),
                ('western_brewing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='catalog.Brewing')),
            ],
        ),
        migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False)),
                ('country', models.CharField(max_length=30)),
                ('region', models.CharField(blank=True, max_length=50)),
                ('locality', models.CharField(blank=True, max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['country', 'region', 'locality'],
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=50)),
                ('translated_name', models.CharField(blank=True, max_length=50)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Category')),
                ('gongfu_brewing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='catalog.Brewing')),
                ('origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Origin')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('western_brewing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='catalog.Brewing')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=50)),
                ('website', models.CharField(blank=True, max_length=50)),
                ('popularity', models.PositiveSmallIntegerField(blank=True, default=5, null=True, validators=[django.core.validators.MaxValueValidator(10)])),
                ('origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Origin')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VendorTrademark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Tea',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to=catalog.models.get_upload_path)),
                ('year', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('gongfu_preferred', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('last_consumed_on', models.DateTimeField(auto_now=True)),
                ('price', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('weight_left', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('weight_consumed', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('rating', models.SmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True, max_length=10000, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.Category')),
                ('gongfu_brewing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='catalog.Brewing')),
                ('origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Origin')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Subcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Vendor')),
                ('western_brewing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='catalog.Brewing')),
            ],
        ),
        migrations.CreateModel(
            name='SubcategoryName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Subcategory')),
            ],
        ),
        migrations.AddConstraint(
            model_name='brewing',
            constraint=models.UniqueConstraint(fields=('temperature', 'weight', 'initial', 'increments'), name='unique_brewing'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='origin',
            constraint=models.UniqueConstraint(fields=('user', 'country', 'region', 'locality'), name='unique_origin'),
        ),
        migrations.AddConstraint(
            model_name='origin',
            constraint=models.UniqueConstraint(condition=models.Q(locality=None), fields=('user', 'country', 'region'), name='unique_region_origin'),
        ),
        migrations.AddConstraint(
            model_name='origin',
            constraint=models.UniqueConstraint(condition=models.Q(region=None), fields=('user', 'country', 'locality'), name='unique_locality_origin'),
        ),
    ]
