# Generated by Django 3.0.6 on 2020-06-28 21:59

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('username', models.CharField(max_length=255, verbose_name='Name')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Joined at')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('WHITE', 'WHITE'), ('YELLOW', 'YELLOW'), ('GREEN', 'GREEN'), ('OOLONG', 'OOLONG'), ('BLACK', 'BLACK'), ('FERMENTED', 'FERMENTED'), ('HERBAL', 'HERBAL'), ('SCENTED', 'SCENTED'), ('OTHER', 'OTHER')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='GongfuBrewing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.PositiveSmallIntegerField(blank=True, default=99, null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('weight', models.DecimalField(blank=True, decimal_places=1, default=5, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('initial', models.DurationField(blank=True, default=datetime.timedelta(seconds=20), null=True)),
                ('increments', models.DurationField(blank=True, default=datetime.timedelta(seconds=5), null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=30)),
                ('area', models.CharField(blank=True, max_length=50)),
                ('city', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'ordering': ['country', 'area', 'city'],
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('translated_name', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SubcategoryName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('website', models.CharField(blank=True, max_length=50)),
                ('popularity', models.PositiveSmallIntegerField(blank=True, default=5, null=True, validators=[django.core.validators.MaxValueValidator(10)])),
            ],
        ),
        migrations.CreateModel(
            name='VendorTrademark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='WesternBrewing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.PositiveSmallIntegerField(blank=True, default=99, null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('weight', models.DecimalField(blank=True, decimal_places=1, default=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('initial', models.DurationField(blank=True, default=datetime.timedelta(seconds=120), null=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name='westernbrewing',
            constraint=models.UniqueConstraint(fields=('temperature', 'weight', 'initial'), name='unique_western'),
        ),
        migrations.AddField(
            model_name='vendortrademark',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Vendor'),
        ),
        migrations.AddField(
            model_name='vendor',
            name='origin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Origin'),
        ),
        migrations.AddField(
            model_name='vendor',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='subcategoryname',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Subcategory'),
        ),
        migrations.AddField(
            model_name='subcategory',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Category'),
        ),
        migrations.AddField(
            model_name='subcategory',
            name='gongfu_brewing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.GongfuBrewing'),
        ),
        migrations.AddField(
            model_name='subcategory',
            name='origin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Origin'),
        ),
        migrations.AddField(
            model_name='subcategory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='subcategory',
            name='western_brewing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.WesternBrewing'),
        ),
        migrations.AddConstraint(
            model_name='origin',
            constraint=models.UniqueConstraint(fields=('country', 'area', 'city'), name='unique_origin'),
        ),
        migrations.AddConstraint(
            model_name='origin',
            constraint=models.UniqueConstraint(condition=models.Q(city=None), fields=('country', 'area'), name='unique_area_origin'),
        ),
        migrations.AddConstraint(
            model_name='origin',
            constraint=models.UniqueConstraint(condition=models.Q(area=None), fields=('country', 'city'), name='unique_city_origin'),
        ),
        migrations.AddConstraint(
            model_name='gongfubrewing',
            constraint=models.UniqueConstraint(fields=('temperature', 'weight', 'initial', 'increments'), name='unique_gongfu'),
        ),
        migrations.AddField(
            model_name='category',
            name='gongfu_brewing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.GongfuBrewing'),
        ),
        migrations.AddField(
            model_name='category',
            name='western_brewing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.WesternBrewing'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
